#include <mpi.h>
#include<iostream>
#include<string>
#include<fstream>
using namespace std;
int startIndex=0;
void search(string pat,string txt,int peritem)
{
int start=startIndex,count=0;
    int M = pat.length();
    int N = txt.length();
 
    /* A loop to slide pat[] one by one */
    for (int i = start; i <= N - M; i++) {
        int j;
        if(count==peritem){
            break;
        }
        count++;
        /* For current index i, check for pattern match */
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
 
        if (j== M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
            cout << "Pattern found at index " << i << endl;
    }
}
int main(int argc, char *argv[])
{
int npes, myrank;
string value;
fstream read;
read.open("text.txt",ios::in);
getline(read,value);
MPI_Init(&argc, &argv);
MPI_Comm_size(MPI_COMM_WORLD, &npes);
MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
int peritem=value.length()/2;
if(myrank==0){
cout<<"Text:" <<value<<endl;
cout<<"Pattern:"<<"GC"<<endl;
search("GC",value,peritem);
startIndex+=peritem;
  MPI_Send(&startIndex,sizeof(startIndex), MPI_INT,myrank+1,myrank, MPI_COMM_WORLD);
}
else{
MPI_Recv(&startIndex,sizeof(startIndex),MPI_INT,myrank-1,myrank-1,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
search("GC",value,peritem);
startIndex+=peritem;
}
MPI_Finalize();
}
